version: 2.1
orbs:
  browser-tools: circleci/browser-tools@1.4.0

executors:
  ruby:
    docker:
      - image: cimg/ruby:2.7.6-browsers
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    working_directory: ~/spot
    environment:
      BUNDLE_PATH: vendor/bundle

  application:
    docker:
      - image: cimg/ruby:2.7.6-browsers
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: cimg/redis:6.2
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/redis:4
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: postgres:13-alpine
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_USER: spot_dev_user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: spot_test
      - image: samvera/fcrepo4:4.7.5
        environment:
          CATALINA_OPTS: '-Djava.awt.headless=true -Dfile.encoding=UTF-8 -server -Xms512m -Xmx1024m -XX:NewSize=256m -XX:MaxNewSize=256m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:+DisableExplicitGC'
      - image: solr:8.11.2
        environment:
          SOLR_AUTH_TYPE: basic
          SOLR_AUTHENTICATION_OPTS: "-Dbasicauth=solr:SolrRocks"
        command: |
          bash -c 'bin/solr start -cloud -p 8983 && bin/solr auth enable -credentials solr:SolrRocks && bin/solr stop && solr-foreground -cloud -p 8983'
    working_directory: ~/spot
    environment:
      BUNDLE_PATH: vendor/bundle
      CAS_BASE_URL: http://localhost
      CI: 1
      FEDORA_TEST_URL: http://localhost:8080/rest
      IIIF_BASE_URL: http://localhost/iiif/2
      RAILS_ENV: test
      NOKOGIRI_USE_SYSTEM_LIBRARIES: true
      PSQL_DATABASE: spot_test
      PSQL_USER: spot_dev_user
      PSQL_PASSWORD: password
      SOLR_TEST_URL: http://solr:SolrRocks@localhost:8983/solr/spot-test
      URL_HOST: http://localhost

jobs:
  bundle:
    executor: ruby
    steps:
      - checkout
      - restore_cache:
          name: Restore cached bundle
          key: spot-gems-{{ checksum "Gemfile.lock" }}
      - restore_cache:
          name: Restore cached node_modules
          key: spot-node_modules-{{ checksum "yarn.lock" }}
      - run:
          name: Install dependencies (ruby)
          command: bundle check || bundle install
      - run:
          name: Install dependencies (js)
          command: yarn install
      - save_cache:
          name: Store cache of bundle
          key: spot-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - save_cache:
          name: Store cache of node_modules
          key: spot-node_modules-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      - persist_to_workspace:
          root: ~/
          paths:
            - spot/*
            - spot/**/*

  lint:
    executor: ruby
    steps:
    - attach_workspace:
        at: ~/
    - run:
        name: Fine, we'll install bundler again
        command: gem install bundler:1.16.1
    - run:
        name: Get 'em Rubocop!
        command: (bundle check || bundle install) && bundle exec rubocop

  test:
    executor: application
    parallelism: 4
    steps:
      - attach_workspace:
          at: ~/

      # install dependencies
      - run:
          name: Install Postgres 13
          command: |
            sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
            curl -s https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
            sudo apt-get update
            sudo apt-get -y install postgresql-13

      - browser-tools/install-chrome
      - browser-tools/install-chromedriver

      # start chrome
      - run:
          name: Start headless Chrome browser
          command: google-chrome --headless --disable-gpu -no-sandbox --browsertime.xvfb --remote-debugging-port=9222 http://localhost &

      - run:
          name: Make sure dependencies are valid
          command: |
            gem install bundler:1.16.1
            bundle check || bundle install

      - run:
          name: Load config into Solr
          command: |
            cd docker/solr/config
            zip -1 spot_solr_config.zip ./*
            curl --user solr:SolrRocks -H "Content-type: application/octet-stream" --data-binary @spot_solr_config.zip "http://localhost:8983/solr/admin/configs?action=UPLOAD&name=spot"
            curl --user solr:SolrRocks -H "Content-type: application/json" http://localhost:8983/api/collections/ -d "{create: {name: spot-test, config: spot, numShards: 1}}"

      - run:
          name: Install Code Climate Test Reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter

      - run:
          name: Run RSpec tests
          command: |
            bundle exec rake db:migrate
            mkdir /tmp/test-results
            ./cc-test-reporter before-build
            bundle exec rspec \
              --backtrace \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress\
              -- \
              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)

      - run:
          name: Code Climate test coverate
          command: |
            ./cc-test-reporter format-coverage -t simplecov -o "coverage/codeclimate.$CIRCLE_NODE_INDEX.json"

      - persist_to_workspace:
          root: coverage
          paths:
            - codeclimate.*.json

      - store_test_results:
          path: /tmp/test-results

      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

  upload-coverage:
    executor: ruby
    steps:
      - attach_workspace:
          at: ~/spot
      - run:
          name: Install Code Climate Test Reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          command: |
            ./cc-test-reporter sum-coverage --output - codeclimate.*.json | ./cc-test-reporter upload-coverage --debug --input -

workflows:
  version: 2
  ci:
    jobs:
    - bundle:
        context:
          - dss-docker-auth
    - lint:
        context:
          - dss-docker-auth
        requires:
          - bundle
    - test:
        context:
          - dss-docker-auth
        requires:
          - lint
    - upload-coverage:
        context:
          - dss-docker-auth
        requires:
          - test
